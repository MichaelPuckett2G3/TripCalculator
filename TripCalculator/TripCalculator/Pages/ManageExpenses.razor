@inject ManageExpensesViewModel manageExpensesViewModel
@inject ManageStudentsViewModel manageStudentsViewModel

<h3>Manage Expenses</h3>

<label>Add New Expenses</label>
<EditForm Model="@Expense" OnValidSubmit="AddExpense">
    <div class="input-group">
        <InputText class="form-control" @bind-Value="Expense.Name" />
        <label class="input-group-text">Expense Name</label>
    </div>

    <div class="input-group">
        <label class="input-group-text">$</label>
        <InputNumber class="form-control" @bind-Value="Expense.Cost" />
        <label class="input-group-text">Cost</label>
    </div>

    <div class="input-group">
        <button type="submit" class="btn btn-primary btn-outline-dark">Add</button>
        <InputSelect @bind-Value=@SelectedStudentId>
            <option value="">-- NONE --</option>
            @foreach (var student in manageStudentsViewModel.Students)
            {
                <option value="@student.Id">@student.Name</option>
            }
        </InputSelect>
        <label class="input-group-text">Select Student</label>
    </div>
</EditForm>

<label>Expenses</label>
<div class="container-fluid">
    @foreach (var expense in manageExpensesViewModel.Expenses)
    {
    <div class="row">
        <span>@expense.Name</span>
        <span>$@expense.Cost</span>
        <span>@expense.Student.Name</span>
    </div>
    }
</div>

@code {
    public Expense Expense { get; set; } = new();
    public int SelectedStudentId { get; set; }

    public void AddExpense()
    {
        var selectedStudent = manageStudentsViewModel.Students.FirstOrDefault(x => x.Id == SelectedStudentId);
        if (selectedStudent == null) return;
        Expense.Student = selectedStudent;

        manageExpensesViewModel.AddExpense(Expense);
        manageExpensesViewModel.CommitChanges();

        Expense = new();
        SelectedStudentId = 0;

        InvokeAsync(StateHasChanged);
    }
}
