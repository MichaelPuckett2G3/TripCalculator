@page "/"
@inject ManageExpensesViewModel manageExpensesViewModel
@inject ManageStudentsViewModel manageStudentsViewModel
@inject ITripCalculator tripCalculator;
@inject Dal.IMockTrip tripMocker;

<div class="text-center">
    <label class="h1">Trip Calculator</label>
    <div class="py-lg-2">
        <button class="btn btn-secondary btn-lg" @onclick="LoadMockTrip">Load Mock</button>
        <button class="btn btn-warning btn-lg" @onclick="Reset">Reset</button>
    </div>
    <div class="container-fluid py-1">
        <div class="row">
            <div class="col border-left border-right border-3 border-dark rounded">
                <ManageStudents />
            </div>
            <div class="col border-left border-right border-3 border-dark rounded">
                <h2>Trip Expenses</h2>
                <EditForm class="py-md-2" Model="@Expense" OnValidSubmit="AddExpense">
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="Expense.Name" />
                        <label class="input-group-text">Expense Name</label>
                    </div>

                    <div class="input-group">
                        <label class="input-group-text">$</label>
                        <InputNumber class="form-control" @bind-Value="Expense.Cost" />
                        <label class="input-group-text">Cost</label>
                    </div>

                    <div class="input-group">
                        <label class="input-group-text">Select Student</label>
                        <InputSelect class="dropdown" @bind-Value=@SelectedStudentId>
                            <option class="dropdown-item" value="">-- NONE --</option>
                            @foreach (var student in manageStudentsViewModel.Students)
                            {
                                <option class="dropdown-item" value="@student.Id">@student.Name</option>
                            }
                        </InputSelect>
                        <button type="submit" class="btn btn-dark btn-outline-light">Add Expense</button>
                    </div>
                </EditForm>
                <div class="m-2">
                    <button class="btn btn-primary btn-lg" @onclick="CalculateTrip">Calculate Trip</button>
                </div>
                <div class="list-group">
                    @if (Trip?.Expenses is not null)
                    {
                        @foreach (var expense in Trip.Expenses)
                        {
                            <p class="list-group-item">@expense.Student.Name has expense for @expense.Name at @expense.Cost.ToString("C")</p>
                        }
                    }
                </div>
            </div>
            <div class="col border-left border-right border-3 border-dark rounded">
                <h2 class="h2">Money Debt Report</h2>
                @if (MoneyDebtReport is not null)
                {
                    <div class="card-group">
                        <div class="card">
                            <label class="card-header h4 bg-success">Debtors</label>
                            <div class="card-body">
                                <table class="table table-responsive-sm">
                                    <thead class="table-dark">
                                        <tr>
                                            <td>Name</td>
                                            <td>Owes</td>
                                        </tr>
                                    </thead>
                                    @foreach (var debtor in MoneyDebtReport.Debtors)
                                    {
                                        <tr>
                                            <td>@debtor.Student.Name</td>
                                            <td>@debtor.Amount.ToString("C")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <div class="card-footer">
                                <span>Total Debt $@RoundedTotalDebt</span>
                            </div>
                        </div>
                        <div class="card">
                            <label class="card-header h4 bg-success">Creditors</label>
                            <div class="card-body">
                                <table class="table table-responsive-sm">
                                    <thead class="table-dark">
                                        <tr>
                                            <td>Name</td>
                                            <td>Is Owed</td>
                                        </tr>
                                    </thead>
                                    @foreach (var Creditor in MoneyDebtReport.Creditors)
                                    {
                                        <tr>
                                            <td>@Creditor.Student.Name</td>
                                            <td>@Creditor.Amount.ToString("C")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <div class="card-footer text-end">
                                <span>Total Credit $@RoundedTotalCredit</span>
                            </div>
                        </div>
                    </div>
                    <div class="card my-2">
                        <label class="card-header h4 bg-success">Debt Record</label>
                        <ul class="list-group">
                            @foreach (var record in MoneyDebtReport.DebtRecord)
                            {
                                <li class="list-group-item">@record.Debtor.Name will pay @record.Creditor.Name $@record.Amount</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public Expense Expense { get; set; } = new Expense();
    public Trip Trip { get; set; } = new Trip();
    public int SelectedExpenseId { get; set; }
    public int SelectedStudentId { get; set; }
    public MoneyDebtReport MoneyDebtReport { get; set; }

    public void AddExpense()
    {
        var selectedStudent = manageStudentsViewModel.Students.FirstOrDefault(x => x.Id == SelectedStudentId);
        if (selectedStudent == null) return;
        Expense.Student = selectedStudent;

        manageExpensesViewModel.AddExpense(Expense);
        manageExpensesViewModel.CommitChanges();

        Trip.Expenses.Add(Expense);

        Expense = new();

        SelectedStudentId = 0;
        SelectedExpenseId = 0;


        InvokeAsync(StateHasChanged);
    }

    public void CalculateTrip()
    {
        MoneyDebtReport = tripCalculator.CalculateDebt(Trip);
    }

    public void LoadMockTrip()
    {
        Reset();
        Trip = tripMocker.GetTrip();
        foreach (var student in Trip.Expenses.Select(s => s.Student).Distinct())
        {
            manageStudentsViewModel.AddStudent(student);
        }
        foreach (var expense in Trip.Expenses)
        {
            manageExpensesViewModel.AddExpense(expense);
        }
    }

    public void Reset()
    {
        Trip = new Trip();
        manageStudentsViewModel.RemoveAllStudents();
        manageExpensesViewModel.RemoveAllExpenses();
        InvokeAsync(StateHasChanged);
    }

    public string RoundedTotalDebt => Math.Round(MoneyDebtReport.TotalDebt, 2).ToString();
    public string RoundedTotalCredit => Math.Round(MoneyDebtReport.TotalCredit, 2).ToString();
}
